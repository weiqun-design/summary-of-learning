mysql索引的类型

索引分为聚簇索引和非聚簇索引两种，聚簇索引是按照数据存放的物理位置为顺序的，而非聚簇索引就不同了，聚簇索引能提高多行检索的速度，而非聚簇索引对
单行的索引很快。


普通索引
是最基本的索引，它没有任何限制，MyIASM中默认的BTREE类型的索引，也是我们大多数情况下用到的索引。

唯一索引
与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值的组合必须唯一。

全文索引（FULLTEXT）
全文索引仅可用于MyISAM表，对于大容量的数据表，生成全文索引是一个非常消耗时间非常消耗硬盘空间的做法。

单列索引、多列索引
多个单列索引与多列索引的查询效果不同，因为执行查询时，MySQL只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。

组合索引（最左前缀）
alter table article add index index_titme_time(title(50), time(10))。建立这样的组合索引相当于分别建立了下面两组组合索引：
-title，time
-title

索引的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE
因为在更新表时，MYSQL不仅要保存数据，还要保存一下索引文件。建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但是如果在一个大表上创建
了多种组合索引，索引文件会膨胀很快。索引只是提高效率的一个因素，如果你的MYSQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。


聚集索引是按照每张表的主键构造一颗B+树，同时叶子节点中存放的即为整张表的行记录数据。
如果定义了主键，InnoDB会自动使用主键来创建聚集索引。如果没有定义主键，InnoDB会选择一个唯一的非空索引代替主键。如果没有唯一的非空索引，InnoDB会隐式定义一个主键来作为聚集索引。


辅助索引，也叫非聚集索引。和聚集索引相比，叶子节点中并不包含行记录的全部数据。叶子节点除了包含键值以外，每个叶子节点的索引行还包含了书签（bookmark），
InnoDB哪里可以找到与索引相对应的行数据。


覆盖索引
InnoDB存储引擎支持覆盖索引，即从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录。
如果要查询辅助索引中不含有的字段，得先遍历辅助索引，再遍历聚集索引，而如果要查询的字段值在辅助索引上就有，就不用再聚集索引了，这会减少IO操作。

联合索引
联合索引是指表上的多个列进行索引。
联合索引也是一颗B+树，其键值数量大于等于2


B+树
B+树是一种树数据结构，通常用于数据库和操作系统的文件系统中。B+树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+树元素自
底向上插入，与二叉树恰好相反。

B树
排序方式：所有节点关键字是按递增次序排列，并遵循左小右大原则：

每个节点最多有m-1个关键字
根节点最少可以只有1个关键字
非根节点至少有m/2个关键字
每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它
所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同
每个节点都存有索引和数据，也就是对应的key和value


















