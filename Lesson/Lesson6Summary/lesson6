1. 矩阵分解：将矩阵拆解为多个矩阵的乘积
2. 矩阵分解方法：EVD 特征值分解，SVD奇异值分解
3. 求解近似矩阵分解的最优化问题ALS，SGD
4. 矩阵分解中的问题，很多矩阵都是非对称的，矩阵A不是方阵，即维度为m*n
5. 奇异值分解A = 左奇异矩阵 * 非零元素特征值矩阵 * 右奇异矩阵；在推荐系统中，左奇异矩阵为user矩阵，右奇异矩阵为item矩阵
6. 传统svd在使用上的局限：svd分解要求矩阵是稠密的，即矩阵中的元素不能有缺失；所以，类似于数据清洗，我们需要先对矩阵中的缺失元素进行补全；
   但实际问题是要求的缺失值。
7. 传统svd存在的问题：矩阵往往是稀疏的，大量缺失值=>计算量大；填充方式简单粗暴=>噪音大
8. FunkSVD的算法思想：设置k，对矩阵近似求解，矩阵补全以后，再预测，实际上噪音大。矩阵分解之后的还原，只需要关注与原来矩阵中有值的位置进行对比即可，
   不需要对所有元素进行对比。
9. FunkSVD解决思路：避开稀疏问题，而且只用两个矩阵进行相乘
10. FunkSVD求解过程梯度下降法求解FunkSVD中P和Q使得损失函数最小化，通过P和Q将矩阵补全，针对某个用户，按照补全值从大到小进行推荐
11. BiasSVD算法原理：用户有自己的偏好，比如乐观用户的用户打分偏高
                    商品也有自己的偏好，比如质量好的商品，打分偏高
                    将与个性化无关的部分，设置为偏好Bias部分
12. SVD++算法原理：在Bias算法基础上进行了改进，考虑用户的隐式反馈
                 隐式反馈：没有具体的评分，但可能有点击，浏览等行为
                 修改优化目标函数
                 在考虑用户隐式反馈的情况下，最终得到P和Q
13. funkSVD算法 surprise工具中SVD 参数 n_factors：k值，默认100；
                                     n_epochs：迭代次数，默认20
                                     biased：是否使用biasSVD，默认为False
                                     verbose：输出当前epoch，默认为False
                                     reg_all：所有正则化项的统一参数，默认为0.02
                                     reg_bu: bu的正则化参数
                                     reg_bi: bi的正则化参数
                                     reg_pu: pu的正则化参数
                                     reg_qi: qi的正则化参数
14. SVD++使用surprise工具中的SVDpp方法
15. 流行度：内容的流行程度，也称之为热度，最常见的是将榜单中热度的内容推荐给用户（微博热搜，TopN商品）
           基于流行度的推荐是围绕流行度计算产生的推荐模型（不仅是TopN）
           解决冷启动问题 => 根据流行度来推荐商品的算法，也就是什么内容吸引用户就给用户推荐什么内容
           流行度是对商品热度的一种衡量方式，是否对推荐结果有效，还需要具体分析
16. 流行度的衡量：
    流行度有多种度量的方式，可粗可细
    一段时间内的：总数count，相对值ratio，可能性possibility
17. 某个item被用户反馈的次数，用户热度/用户总数，比如点击率、观看率、完播率
18. 影响流行度的因素：
    时间因素：电影上映的阶段（上映前，前3天，上映中期，尾声），用户使用的时间（早上，中午，晚上）
    空间因素：用户所在的位置，比如某个电影在南方和北方票房的差别，地域属性
            某个餐厅在不同位置的流行度
            一个网站不同banner位置带来的影响
    社会心理因素：一个商品，歌曲是否流行，未必代表它本身质量好坏，与从众心理也有关，从众心理是普遍现象
    个性 VS 群体：环境压力，个体容易收到群体的影响，在群体中个性会被埋没，群体思想将会占主导地位经济利益最大化，群体行为采用该群体利益最大化的方式
                节省分析成本，直接follow群体行为
19. moviesLens数据集
    5分和1分占比很小，但对系统来说价值最大
    高流行度的item所占比例很小
    低举行度的item评分差异大（越不流行=>自己的喜好来判断）
    高流行度的item评分差异小（越流行=>群体的喜好影响力大）
    高中低评分的电影，评分随时间变化的趋势相似
    评分随时间的变化趋势，都是先升高再降低
    高流行度的item，评分波动越小，反之低流行度item，评分波动小
20. 冷启动问题：当用户行为信息不足时，采用非个性化推荐
              算法本质什么内容吸引用户，就给用户推荐什么内容
              也需要有代表性和区分性（不能太大众化或老少皆宜 => 无法区分用户的兴趣）
              多样性，用户兴趣的可能性很多，为了匹配兴趣的多样性 => 提供具有较高覆盖率的启动item集合（这些物品能覆盖主流的用户兴趣）
21. 流行度 VS 个性化推荐
    长尾理论，市场上冷门产品所占据的共同市场份额不低于热门产品所占据的市场份额。因为热门商品需求很高，但数量少。相反，单个冷门商品需求少，但数据量巨大
    流行度较高的item，较少体现用户个性
    流行度较低的item，更能代表用户个性（兴趣），计算用户相似度更准确
    结论，在计算相似度推荐时，可以推荐相似度高，但不流行的item
22. 新用户在冷启动启动阶段更倾向于热门排行榜的，老用户会更加需要长尾推荐。
23. 需要考虑到不同网站的特性
    电商网站，比如唯品会特卖，目标是打造爆款
    婚恋网站，比如世纪佳缘，目标是让更多人活跃起来
24. 推荐系统的脆弱性：由于有利益，所以有作弊的可能；协同过滤的原理是挖掘相似的用户，通过它们的行为进行推荐，需要考虑是否存在虚假恶意的行为，故意增加或者或者压制某些item被推荐的可能性
    评价的指标包括了精准率，多样性，新颖度，覆盖率。需要结合具体的目标来进行使用
    基于流行度的推荐=>信息茧房






