下面列出的是使用 Spring 框架主要的好处：
Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，
但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品。
Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你必须并且只需要但是你需要的，而忽略剩余的那部分。
Spring 不会让你白费力气坐重复工作，它真正的利用了一些现有的技术，像几个 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器，其他视图技术。
测试一个用 Spring 编写的应用程序很容易，因为 environment-dependent 代码被放进了这个框架中。此外，通过使用 JavaBean-style POJOs，
它在使用依赖注入注入测试数据时变得更容易。
Spring 的 web 框架是一个设计良好的 web MVC 框架，它为 web 框架，比如 Structs 或者其他工程上的或者很少受欢迎的 web 框架，
提供了一个很好的供替代的选择。
为将特定技术的异常（例如，由 JDBC、Hibernate，或者 JDO 抛出的异常）翻译成一致的， Spring 提供了一个方便的 API，而这些都是未经检验的异常。
轻量级的 IOC 容器往往是轻量级的，例如，特别是当与 EJB 容器相比的时候。这有利于在内存和 CPU 资源有限的计算机上开发和部署应用程序。
Spring 提供了一个一致的事务管理界面，该界面可以缩小成一个本地事务（例如，使用一个单一的数据库）和扩展成一个全局事务（例如，使用 JTA）。

核心容器由核心，bean，上下文和表达式语言模块组成，它们的细节如下：
1、核心模块提供了框架的基本组成部分，包括IOC和依赖注入功能
2、Bean模块提供BeanFactory，它是一个工厂模式的复杂实现
3、上下文模块建立在由核心和Bean模块提供的坚实基础上，它是访问定义和配置的任何对象的媒介。ApplicationContext接口是上下文模块的重点。
4、表达式语言模块在运行时提供了查询和操作一个对象图的强大的表达式语言。

数据访问/集成
数据访问/集成层包括JDBC，ORM，OXM，JMS和事务处理模块，它们的细节如下：
1、JDBC模块提供了删除冗余的JDBC相关编码的JDBC抽象层。
2、ORM模块为流行的对象关系映射API，包括JPA、JDO、Hibernate和iBatis，提供了集成层。
3、OXM模块提供了抽象层，它支持对JAXB、Castor、XMLBeans、JiBX和XStream的对象/XML映射实现。
4、JAVA消息服务JMS模块包含生产和消费的信息的功能
5、事务模块为实现特殊接口的类以及所有的POJO支持编程式和声明式事务管理

Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成，它们的细节如下：
Web 模块提供了基本的面向 web 的集成功能，例如多个文件上传的功能和使用 servlet 监听器和面向 web 应用程序的上下文来初始化 IoC 容器。
Web-MVC 模块包含 Spring 的模型-视图-控制器（MVC），实现了 web 应用程序。
Web-Socket 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。
Web-Portlet 模块提供了在 portlet 环境中实现 MVC，并且反映了 Web-Servlet 模块的功能。

还有其他一些重要的模块，像 AOP，Aspects，Instrumentation，Web 和测试模块，它们的细节如下：
AOP 模块提供了面向方面的编程实现，允许你定义方法拦截器和切入点对代码进行干净地解耦，它实现了应该分离的功能。
Aspects 模块提供了与 AspectJ 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。
Instrumentation 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。
Messaging 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一个注解编程模型，
它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。
测试模块支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。






















