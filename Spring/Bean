属性	                                              描述
class	                           这个属性是强制性的，并且指定用来创建 bean 的 bean 类。
name	                           这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符。
scope	                           这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。
constructor-arg	                   它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
properties	                       它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
autowiring mode	                   它是用来注入依赖关系的，并会在接下来的章节中进行讨论。
lazy-initialization mode	       延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。
initialization 方法	               在 bean 的所有必需的属性被容器设置之后，调用回调方法。它将会在 bean 的生命周期章节中进行讨论。
destruction 方法	                   当包含该 bean 的容器被销毁时，使用回调方法。它将会在 bean 的生命周期章节中进行讨论。


SpringIOC容器完全由实际编写的配置元数据的格式解耦。有三种方法把配置元数据提供给Spring容器：
基于XML配置文件
基于注解的配置
基于Java的配置



Bean的作用域

singleton	该作用域将 bean 的定义的限制在每一个 Spring IoC 容器中的一个单一实例(默认)。
prototype	该作用域将单一 bean 的定义限制在任意数量的对象实例。
request	该作用域将 bean 的定义限制为 HTTP 请求。只在 web-aware Spring ApplicationContext 的上下文中有效。
session	该作用域将 bean 的定义限制为 HTTP 会话。 只在web-aware Spring ApplicationContext的上下文中有效。
global-session	该作用域将 bean 的定义限制为全局 HTTP 会话。只在 web-aware Spring ApplicationContext 的上下文中有效。


如果作用域设置为 singleton，那么 Spring IoC 容器刚好创建一个由该 bean 定义的对象的实例。
该单一实例将存储在这种单例 bean 的高速缓存中，以及针对该 bean 的所有后续的请求和引用都返回缓存对象。

如果作用域设置为 prototype，那么每次特定的 bean 发出请求时 Spring IoC 容器就创建对象的新的 Bean 实例。

理解 Spring bean 的生命周期很容易。当一个 bean 被实例化时，它可能需要执行一些初始化使它转换成可用状态。
同样，当 bean 不再需要，并且从容器中移除时，可能需要做一些清除工作。
为了定义安装和拆卸一个 bean，我们只要声明带有 init-method 和/或 destroy-method 参数的 。init-method 属性指定一个方法，
在实例化 bean 时，立即调用该方法。同样，destroy-method 指定一个方法，只有从容器中移除 bean 之后，才能调用该方法。

ApplicationContext 会自动检测由 BeanPostProcessor 接口的实现定义的 bean，注册这些 bean 为后置处理器，然后通过在容器中创建 bean，
在适当的时候调用它

自动装配
模式	                                                     描述
no	               这是默认的设置，它意味着没有自动装配，你应该使用显式的bean引用来连线。你不用为了连线做特殊的事。在依赖注入章节你已经看到这个了。
byName	           由属性名自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 byName。然后尝试匹配，并且将它的属性与在配置文件中被定义为相同名称的 beans 的属性进行连接。
byType	           由属性数据类型自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 byType。然后如果它的类型匹配配置文件中的一个确切的 bean 名称，它将尝试匹配和连接属性的类型。
                   如果存在不止一个这样的 bean，则一个致命的异常将会被抛出。
constructor	       类似于 byType，但该类型适用于构造函数参数类型。如果在容器中没有一个构造函数参数类型的 bean，则一个致命错误将会发生。
autodetect	       Spring首先尝试通过 constructor 使用自动装配来连接，如果它不执行，Spring 尝试通过 byType 来自动装配。


限制	                                            描述
重写的可能性	       你可以使用总是重写自动装配的 <constructor-arg&gt 和 <property> 设置来指定依赖关系。
原始数据类型	       你不能自动装配所谓的简单类型包括基本类型，字符串和类。
混乱的本质	       自动装配不如显式装配精确，所以如果可能的话尽可能使用显式装配


@Required 注释应用于bean属性的setter方法，它表明受影响的bean属性在配置时必须放在XML配置文件中，
否则容器就会抛出一个BeanInitializationException异常

当 Spring遇到一个在setter方法中使用@Autowired 注释，它会在方法中视图执行 byType 自动连接。
可以在属性中使用 @Autowired 注释来除去 setter 方法。当时使用 为自动连接属性传递的时候，Spring 会将这些传递过来的值或者引用自动分配给那些属性。

默认情况下，@Autowired 注释意味着依赖是必须的，它类似于 @Required 注释，然而，你可以使用 @Autowired 的 （required=false） 选项关闭默认行为。


基于 Java 的配置选项，可以使你在不用配置 XML 的情况下编写大多数的 Spring
带有 @Configuration 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。@Bean 注解告诉 Spring，
一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。最简单可行的 @Configuration 类如下所示：

package com.tutorialspoint;
import org.springframework.context.annotation.*;
@Configuration
public class HelloWorldConfig {
   @Bean
   public HelloWorld helloWorld(){
      return new HelloWorld();
   }
}
上面的代码将等同于下面的 XML 配置：

<beans>
   <bean id="helloWorld" class="com.tutorialspoint.HelloWorld" />
</beans>


@import 注解允许从另一个配置类中加载 @Bean 定义

通过 ApplicationEvent 类和 ApplicationListener 接口来提供在 ApplicationContext 中处理事件。如果一个 bean 实现 ApplicationListener，
那么每次 ApplicationEvent 被发布到 ApplicationContext 上，那个 bean 会被通知。

序号	                    Spring 内置事件 & 描述
1                       ContextRefreshedEvent
                        ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext
                        接口中使用 refresh() 方法来发生。

2                       ContextStartedEvent
                        当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。
                        你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。

3                       ContextStoppedEvent
                        当使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，发布这个事件。
                        你可以在接受到这个事件后做必要的清理的工作。

4                       ContextClosedEvent
                        当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。
                        一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。

5                       RequestHandledEvent
                        这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。


为了监听上下文事件，一个 bean 应该实现只有一个方法 onApplicationEvent() 的 ApplicationListener 接口。
因此，我们写一个例子来看看事件是如何传播的，以及如何可以用代码来执行基于某些事件所需的任务。


编程式事务管理方法允许你在对你的源代码编程的帮助下管理事务。这给了你极大地灵活性，但是它很难维护。
























