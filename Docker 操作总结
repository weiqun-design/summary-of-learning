一、基本使用
1. 安装docker社区版
2. docker info，docker version验证是否安装成功
3. sudo usermod -aG docker $USER
4. 启动docker服务  sudo service docker start 或 sudo systemctl start docker
5. docker image ls  列出所有docker image文件
6. docker image rm  [imageName] 删除image文件
7. Docker Hub 是最常用的image库
8. docker image pull library/hello-world
9. 运行image文件 docker container run hello-world
10. docker container run -it ubuntu bash   # 命令行体验ubuntu系统
11. docker container kill [containID]   # 杀死不会自动终止的容器
12. docker container ls  列出本机正在运行的容器
13. docker container ls --all 列出本机所有容器，包含终止运行的容器
14. 终止运行的container依然会占据硬盘空间，可以使用docker container rm 命令删除
15. 编写dockerfile，docker会根据该文件生成二进制image文件


16. 在项目的根目录下新建 .dockerignore 文本文件，文件中内容为不需要打包进入image的文件路径
17. 在项目的根目录下新建 Dockerfile文件 内容如下
    FROM openjdk:8-jdk # 继承官方image
    COPY . /app        # 将当前目录下的所有文件都copy进入image文件的/app目录
    WORKDIR /app       # 指定工作路径为/app
    CMD ["bash", "startup.sh"] # 在工作路径运行startup.sh文件   CMD命令在容器启动后执行，只能有一个CMD命令
    RUN npm install    # 在工作路径执行npm install  RUN命令在image文件的构建截断执行，可以有多个RUN命令
    EXPOSE 3000:       # 将容器3000端口暴露出来，允许外部连接这个端口

18. 执行docker image build -t image_name：image_tag 创建image文件
19. 执行docker container run -p 8000:3000  -it image_name:image_tag  /bin/bash                生成容器,内部执行的第一个命令启动bash
20. docker container start 命令可以启动已经生成、已经停止运行的容器文件
21. docker container logs [containerID]   查看docker容器的输出
22. docker container exec 进入一个正在运行的docker容器
23. docker container cp [containerID]:[/path/to/file]   将文件拷贝到本机


二、 Docker微服务
1. 由于国内访问docker的官方仓库很慢，还经常掉线 可以在/etc/default/docker文件中 DOCKER_OPTS="--registry-mirror=https://registry.docker-cn.com",
    然后重启docker服务，sudo service docker restart

方法A：
    1. 新建一个工作目录 mkdir docker-dome && cd docker-demo
    2. docker container run --rm --name wordpress --volume "$PWD" : /var/www/html php:5.6-apache 基于php的image文件构建一个容器
       其中 --rm为停止运行后，自动删除容器文件
           --name wordpress  容器名字
           --volume  "$PWD" : /var/www/html       将当前目录映射到容器的/var/www/html
    3. 在当前docker-demo目录执行命令抓取并解压wordpress安装包
        wget https：//cn.wordpress.org/wordpress-4.9.4-zh-CN.tar.gz
        tar -xvf wordpress-4.9.4-zh_CN.tar.gz
    4. 执行docker container run  -d --rm --name wordpressdb --env MYSQL_ROOT_PASSWORD=123456 --env MYSQL_DATABASE=wordpress mysql:5.7
       其中-d 容器启动后，在后台运行
          --rm 容器终止运行后，自动删除容器文件
          --name wordpressdb 容器的名字叫做wordpressdb
          --env  MYSQL_ROOT_PASSWORD=123456   向容器进程传入一个环境变量MYSQL_ROOT_PASSWORD, 该变量会被用作MYSQL的根密码
          --env  MYSQL_DATABASE=wordpress     向容器进程传入一个环境变量MYSQL_DATABASE,容器里面的MYSQL会根据该变量创建一个同名数据库（本例是wordpress）
    5. 停掉wordpress容器 docker container stop wordpress
    6. 在docker-demo目录里面，新建一个DockerFile文件，内容如下：
        FROM php：5.6-apache
        RUN docker-php-ext-install mysqli
        CMD apache2-foreground
        作用为在php基础上，安装mysqli的拓展，然后启动apache
    7. 执行docker build -t phpwithmysql .  新建一个名为phpwithmysql的image文件
    8. 新建一个wordpress容器
        docker container run --rm --name wordpress  --volume "$PWD/" :/var/www/html --link wordpressdb:mysql phpwithmysql
        其中 --link wordpressdb:mysql  表示wordpress容器要连到wordpressdb，冒号表示该容器的别名为mysql
    9. 在当前docker-demo目录，执行 chmod -R 777 wordpress
    10. 访问 http://172.17.0.2/wordpress


方法B：docker compose工具, compose是docker公司推出的一个工具软件，可以管理多个Docker容器组成一个应用。
      docker-compose up    启动所有服务
      docker-compose stop  关闭所有服务
    1. 在docker-demo目录下，新建docker-compose.yml文件，文件内容如下
        mysql:
            image: mysql:5.7
            environment:
              - MYSQL_ROOT_PASSWORD=123456
              - MySQL_DATABASE=wordpress
        web:
            image: wordpress
            links:
              - mysql
            environment:
              - WORDPRESS_DB_PASSWORD=123456
            port:
              - "127.0.0.3:8080:80"
            working_dir: /var/www/html
            volumes:
              - wordpress: /var/www/html
    2. 执行docker-compose up   启动两个容器














docker swarm 集群管理节点

1. 创建docker机器
   docker-machine create -d virtualbox swarm-manager
2. 初始化集群，创建管理节点
   docker-machine ssh swam-manager
   docker swam init --advertise-addr 192.168.99.107   # 创建机器时分配的ip

   保存返回命令
   docker swarm join --token SWMTKN-1-4oogo9qziq768dma0uh3j0z0m5twlm10iynvz7ixza96k6jh9p-ajkb6w7qd06y1e33yrgko64sk 192.168.99.107:2377
3. 创建docker worker
   docker-machine create -d virtualbox swarm-worker1
   docker-machine create -d virtualbox swarm-worker2
4. 进入两个worker机器
   docker-machine ssh swarm-worker1
   执行join命令
   docker swarm join --token SWMTKN-1-4oogo9qziq768dma0uh3j0z0m5twlm10iynvz7ixza96k6jh9p-ajkb6w7qd06y1e33yrgko64sk 192.168.99.107:2377
5. docker info  查看集群信息
   docker service create --replicas 1 --name helloworld alpine ping docker.com
6. 查看helloworld服务运行在哪个节点上，可以看到目前是在哪个节点上
   docker service ps hello world
7. 查看helloworld部署的具体信息
   docker service inspect --pretty helloworld
8. 将helloworld服务拓展到两个节点
   docker service scale helloworld=2
9. 删除服务
   docker service rm helloworld
10. 滚动升级服务
   创建一个3.0.6版本的redis
   docker service create --replicas 1 --name redis --update-delay 10s redis:3.0.6
   滚动升级
   docker service update --image redis:3.0.7 redis
11. docker node ls  查看所有的节点
12. docker node update --availability active swarm-worker1




































