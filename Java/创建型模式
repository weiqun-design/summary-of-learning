定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。

工厂方法是指定义工厂接口和产品接口，但如何创建实际工厂和实际产品被推迟到子类实现，从而使调用方只和抽象工厂与抽象产品打交道。
实际更常用的是更简单的静态工厂方法，它允许工厂内部对创建产品进行优化。
调用方尽量持有接口或抽象类，避免持有具体类型的子类，以便工厂方法能随时切换不同的子类返回，却不影响调用方代码。

Builder模式是为了创建一个复杂的对象，需要多个步骤完成创建，或者需要多个零件组装的场景，且创建过程中可以灵活调用不同的步骤或组件。

原型模式是根据一个现有对象实例复制出一个新的实例，复制出的类型和属性与原实例相同。

单例模式保证一个类仅有一个实例，并提供一个访问它的全局访问点。
Singleton模式是为了保证一个程序的运行期间，某个类有且只有一个全局唯一实例；
Singleton模式既可以严格实现，也可以以约定的方式把普通类视作单例。
单例模式的实现方式很简单：
只有private构造方法，确保外部无法实例化；
通过private static变量持有唯一实例，保证全局唯一性；
通过public static方法返回此唯一实例，使外部调用方能获取到实例